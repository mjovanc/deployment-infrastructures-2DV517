---
- name: install dependencies
  apt: pkg={{ item }}
  with_items:
    - mysql-server
    - libmysqlclient-dev
    - python-pip
    - python-dev

- name: install pip modules
  pip: name={{ item }}
  with_items:
    - mysql-python

- name: Current root password from vault
  debug: var={{ mysql_root_pass }}

- name: set mysql root password
  mysql_user:
    name=root
    host=localhost
    password={{ mysql_root_pass }}
    check_implicit_admin=yes

- name: put .my.cnf
  template:
    src=root/.my.cnf.j2
    dest=/root/.my.cnf
    mode=600

- name: fetch .my.cnf
  fetch:
    src=/root/.my.cnf
    dest=tmp/.my.cnf
    flat=yes
  when: mysql_repl_role == "mysql-master"

- name: set mysql root password
  mysql_user:
    name=root
    host={{ item }}
    password={{ mysql_root_pass }}
  with_items:
    - "{{ ansible_hostname }}"
    - localhost
    - 127.0.0.1
    - ::1

- name: create db to be replicated
  mysql_db: 
    name={{ mysql_repl_db }}

- name: generate mysql replication user password
  shell:
    echo -n '{{ mysql_root_pass }}' | md5sum
    | awk '{print $1}'
  changed_when: False
  when: mysql_repl_role == "mysql-master"
  register: mysql_repl_pass

- name: create replication user
  mysql_user:
    name={{ mysql_repl_user }}
    password={{ mysql_repl_pass.stdout }}
    host=%
    priv=*.*:"REPLICATION SLAVE"
  when: mysql_repl_role == "mysql-master"



- name: generate server-id
  shell:
    hostname -I | sed -e 's/ /\n/' | grep -v '^$'
    | tail -1 | awk -F. '{print $3 * 256 + $4}'
  changed_when: False
  register: mysql_server_id

- name: put my.cnf
  template:
    src=etc/mysql/my.cnf.j2
    dest=/etc/mysql/my.cnf
  register: last_result

- name: restart mysql
  service:
    name=mysql
    state=restarted
  when: last_result.changed

- name: put mysqlrepldump.sh
  copy:
    src=usr/local/bin/mysqlrepldump.sh
    dest=/usr/local/bin/mysqlrepldump.sh
    mode=755

- name: export dump file
  shell:
    mysqlrepldump.sh | gzip > /tmp/mysqldump.sql.gz
  when: mysql_repl_role == "mysql-master"

- name: fetch dump file
  fetch:
    src=/tmp/mysqldump.sql.gz
    dest=tmp/mysqldump.sql.gz
    flat=yes
  when: mysql_repl_role == "mysql-master"

- name: put dump file
  copy:
    src=tmp/mysqldump.sql.gz
    dest=/tmp/mysqldump.sql.gz
  when: mysql_repl_role == "mysql-slave"

- name: check status of slaves
  mysql_replication: mode=getslave
  ignore_errors: true
  register: slave_status
  when: mysql_repl_role == "mysql-slave"

- name: stop replication
  mysql_replication: mode=stopslave
  when: mysql_repl_role == "mysql-slave" and (slave_status|failed or slave_status.Slave_SQL_Running != "Yes" or slave_status.Last_IO_Errno != 0)

- name: get mysql replication user password
  shell:
    echo -n '{{ mysql_root_pass }}' | md5sum
    | awk '{print $1}'
  sudo: False
  changed_when: False
  when: mysql_repl_role == "mysql-slave"
  register: mysql_repl_pass

- name: set replication
  mysql_replication:
    mode=changemaster
    master_host={{ hostvars[groups['mysql-master'][0]]['inventory_hostname'] }}
    master_user={{ mysql_repl_user }}
    master_password={{ mysql_repl_pass.stdout }}
    master_port={{ mysql_server_port }}
  when: mysql_repl_role == "mysql-slave" and (slave_status|failed or slave_status.Slave_SQL_Running != "Yes"  or slave_status.Last_IO_Errno != 0)

- name: import dump file
  shell:
    zcat /tmp/mysqldump.sql.gz | mysql
  when: mysql_repl_role == "mysql-slave" and (slave_status|failed or slave_status.Slave_SQL_Running != "Yes" or slave_status.Last_IO_Errno != 0)

- name: start replication
  mysql_replication: mode=startslave
  when: mysql_repl_role == "mysql-slave" and (slave_status|failed or slave_status.Slave_SQL_Running != "Yes" or slave_status.Last_IO_Errno != 0)
